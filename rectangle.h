//
// Copyright ( c ) 2014 Philip Wellnitz
//

//
// This file is part of "Rechteckschoner".
//
// "Rechteckschoner" is distributed to be useful, but need not
// to be. Further, it is distributed WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or 
// FITNESS FOR A PARTICULAR PURPOSE.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files ( the
// "Software" ), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish, 
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//

#pragma once
#include <vector>
#include <cstdio>

typedef unsigned char u8;
struct bitmap;

extern bool highlight;	///< Determines whether changes made to the rectangle tree get highlighted 

extern u8 color[ 3 ]; ///< Colors

class rectangle {
private:
  u8 m_horizontal; 	///< Determines whether the rectangle's children are positioned horizontally next to each other
  u8 m_isNew;	 	///< Rectangle wasnt read from tmp but generated by rectangle::construct.
public:
  std::vector<std::pair<float, rectangle> > m_children;	///< The children of this rectangle in the rectangle tree
  
  /**
   * @return Value of m_horizontal
   */
  u8 isHorizontal(  ) { return m_horizontal; }
  /**
   * @return Value of m_isNew
   */
  u8 isNew(  ) { return m_isNew; }
  
  rectangle(  ) {}
  rectangle( u8 p_horizontal )
    : m_horizontal( p_horizontal ) {
      m_isNew = false;
    }
  
  /**
   * Constructs a new rectangle tree with this rectangle as root
   * @param p_children Amount of every node's children
   * @param p_depth Height of the rectangle tree being generated
   */
  void construct( int p_children, int p_depth );
  
  /**
   * Draws the rectangle tree with this rectangle as root to a bitmap
   * @param p_result Bitmap to which the data will be written
   * @param p_positionX X coordinate of the upper left corner of this rectangle
   * @param p_positionY Y coordinate of the upper left corner of this rectangle
   * @param p_width Width of this rectangle
   * @param p_height Height of this rectangle
   * @param p_between Distance between this rectangle and its children, including the width of this rectangle ( 2px )
   * @return Non-zero if an error occured
   */
  int draw( bitmap* p_result, size_t p_positionX, size_t p_positionY, size_t p_width, size_t p_height, size_t p_between, int p_depth = 0 ); 
  
  /**
   * Writes the rectangle tree with this rectangle as root into a temporary file
   * @param p_tmp Temporary file.
   * @return Non-zero if an error occured
   */
  int writeTmp( FILE* p_tmp );
};

/**
 * Parse a temporary file into a rectangle tree, but eventually recreate subtrees
 * @param p_tmp Temporary file
 * @param p_oldChildren Amount of every node's children in the temporary file's rectangle tree
 * @param p_children Amount of every node's children in recreated subtrees
 * @param p_depth Height of the temporary file's and the generated rectangle tree
 * @param p_recreateDepth Distance from tree root at which a recreation shall be performed
 * @param p_recreatePosition Position from [0;p_oldChildren ) which will be used as root for arecreated subtree
 */
rectangle readTmp( FILE* p_tmp, int p_oldChildren, int p_children, int p_depth, int p_recreateDepth, int p_recreatePosition );
